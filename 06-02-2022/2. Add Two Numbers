You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* curr=l1;
        ListNode* ans=new ListNode();
        ListNode* head=ans;
        ListNode* prev=new ListNode();
        int carry=0,a=0,b=0;
        while(l1!=nullptr || l2!=nullptr){
            a=0;
            b=0;
            if(l1!=nullptr)
                a=l1->val;
            if(l2!=nullptr)
                b=l2->val;
            int sum=a+b+carry;
            if(sum>=10){
                carry=sum/10;
                sum=sum-10;
            }
            else
                carry=0;
            ans->val=sum;
            prev=ans;
            ans->next=new ListNode();
            ans=ans->next;
            if(l1!=nullptr)
                l1=l1->next;
            if(l2!=nullptr)
                l2=l2->next;
        }
        if(carry>0){
            ans->val=carry;
        }
        if(carry==0){
            ans=prev;
            ans->next=nullptr;
        }
        return head;
    }
};
