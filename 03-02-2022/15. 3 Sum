Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        if(nums.size()<2)
            return {};
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        for(int i=0;i<nums.size()-2 && nums[i]<=0;i++){
            if(i==0 || nums[i-1]!=nums[i]){
            int check=-nums[i];
            unordered_set<int> two;
            for(int j=i+1;j<nums.size();j++){
                int diff=check-nums[j];
                if(two.find(diff)==two.end())
                    two.insert(nums[j]);
                else{
                    two.insert(nums[j]);
                    ans.push_back({nums[i],diff,nums[j]});
                    while(j+1<nums.size() && nums[j]==nums[j+1])
                        j++;
                        
                }
                    
            }
        }
        }
        return ans;
    }
};
